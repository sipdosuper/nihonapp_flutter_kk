import 'package:flutter/material.dart';
import 'package:duandemo/service/gemini_service.dart';
import 'chat_screen.dart';

class CreateScenarioScreen extends StatefulWidget {
  const CreateScenarioScreen({super.key});

  @override
  State<CreateScenarioScreen> createState() => _CreateScenarioScreenState();
}

class _CreateScenarioScreenState extends State<CreateScenarioScreen> {
  final _aiController = TextEditingController();
  final _descController = TextEditingController();
  final _userRoleController = TextEditingController(); // Vai tr√≤ ng∆∞·ªùi d√πng

  String _aiGender = 'Nam';
  String _userGender = 'Nam'; // Gi·ªõi t√≠nh ng∆∞·ªùi d√πng

  // ‚úÖ Danh s√°ch g·ª£i √Ω t√¨nh hu·ªëng nhanh
  final List<Map<String, String>> _suggestedScenarios = [
    {
      "ai": "Kh√°ch h√†ng",
      "desc": "B·∫°n l√† nh√¢n vi√™n l·ªÖ t√¢n, kh√°ch ƒë·∫øn ƒë·∫∑t ph√≤ng kh√°ch s·∫°n."
    },
    {
      "ai": "Kh√°ch h√†ng",
      "desc": "B·∫°n l√† nh√¢n vi√™n b√°n h√†ng, kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m qu·∫ßn √°o."
    },
    {
      "ai": "C·∫£nh s√°t h√¨nh s·ª±",
      "desc": "B·∫°n ƒë·∫øn b·∫Øt t√¥i v√¨ li√™n quan ƒë·∫øn v·ª• mua b√°n ma t√∫y"
    },
    {
      "ai": "Kh√°ch h√†ng",
      "desc": "B·∫°n l√†m ph·ª•c v·ª•, kh√°ch ƒë·∫øn nh√† h√†ng v√† g·ªçi m√≥n ƒÉn."
    },
    {
      "ai": "Gi√°o vi√™n",
      "desc": "B·∫°n l√† h·ªçc sinh, mu·ªën h·ªèi b√†i gi√°o vi√™n b·∫±ng ti·∫øng Nh·∫≠t."
    },
  ];

  // ‚úÖ H√†m g·ªçi API t·∫°o t√¨nh hu·ªëng
  void _createScenario({
    required String aiCharacter,
    required String aiGender,
    required String userRole,
    required String userGender,
    required String description,
  }) async {
    final service = GeminiService();

    _showLoadingDialog('ƒêang t·∫°o t√¨nh hu·ªëng, vui l√≤ng ch·ªù...');

    try {
      final response = await service.generateScenario(
        userCharacter: userRole,
        userGender: userGender,
        aiCharacter: aiCharacter,
        aiGender: aiGender,
        description: description,
      );

      if (!context.mounted) return;
      Navigator.pop(context); // ƒê√≥ng loading

      // Chuy·ªÉn sang ChatScreen
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (_) => ChatScreen(
            initialMessage: response,
            userCharacter: userRole,
            userGender: userGender,
            aiCharacter: aiCharacter,
            aiGender: aiGender,
            description: description,
          ),
        ),
      );
    } catch (e) {
      if (!context.mounted) return;
      Navigator.pop(context);
      _showErrorDialog('L·ªói t·∫°o t√¨nh hu·ªëng: $e');
    }
  }

  // ‚úÖ G·ª£i √Ω t√¨nh hu·ªëng v√† t·ª± ƒë·ªông t·∫°o nhanh
  void _createFromSuggestion(Map<String, String> suggestion) {
    final aiCharacter = suggestion["ai"]!;
    final description = suggestion["desc"]!;
    final userRole = _userRoleController.text.isNotEmpty
        ? _userRoleController.text
        : "Nh√¢n vi√™n";

    _createScenario(
      aiCharacter: aiCharacter,
      aiGender: _aiGender,
      userRole: userRole,
      userGender: _userGender,
      description: description,
    );
  }

  // Hi·ªÉn th·ªã l·ªói
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('L·ªói'),
        content: Text(message),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context), child: const Text('OK')),
        ],
      ),
    );
  }

  // Hi·ªÉn th·ªã loading
  void _showLoadingDialog(String message) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Row(
          children: [
            const CircularProgressIndicator(),
            const SizedBox(width: 16),
            Expanded(child: Text(message)),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('T·∫°o t√¨nh hu·ªëng')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Nh√¢n v·∫≠t AI', style: TextStyle(fontSize: 16)),
            TextField(
              controller: _aiController,
              decoration:
                  const InputDecoration(hintText: 'Nh·∫≠p nh√¢n v·∫≠t AI...'),
            ),
            const SizedBox(height: 16),
            const Text('Gi·ªõi t√≠nh AI', style: TextStyle(fontSize: 16)),
            DropdownButton<String>(
              value: _aiGender,
              isExpanded: true,
              items: ['Nam', 'N·ªØ']
                  .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                  .toList(),
              onChanged: (val) => setState(() => _aiGender = val!),
            ),
            const SizedBox(height: 16),
            const Text('Vai tr√≤/Ngh·ªÅ nghi·ªáp c·ªßa b·∫°n',
                style: TextStyle(fontSize: 16)),
            TextField(
              controller: _userRoleController,
              decoration: const InputDecoration(
                  hintText: 'V√≠ d·ª•: Nh√¢n vi√™n l·ªÖ t√¢n, B√°n h√†ng...'),
            ),
            const SizedBox(height: 16),
            const Text('Gi·ªõi t√≠nh c·ªßa b·∫°n', style: TextStyle(fontSize: 16)),
            DropdownButton<String>(
              value: _userGender,
              isExpanded: true,
              items: ['Nam', 'N·ªØ']
                  .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                  .toList(),
              onChanged: (val) => setState(() => _userGender = val!),
            ),
            const SizedBox(height: 16),
            const Text('M√¥ t·∫£ t√¨nh hu·ªëng', style: TextStyle(fontSize: 16)),
            TextField(
              controller: _descController,
              maxLines: 3,
              decoration: const InputDecoration(
                hintText: 'Nh·∫≠p m√¥ t·∫£ v·ªÅ t√¨nh hu·ªëng...',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            Center(
              child: ElevatedButton(
                onPressed: () => _createScenario(
                  aiCharacter: _aiController.text,
                  aiGender: _aiGender,
                  userRole: _userRoleController.text,
                  userGender: _userGender,
                  description: _descController.text,
                ),
                style: ElevatedButton.styleFrom(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
                  textStyle: const TextStyle(fontSize: 18),
                ),
                child: const Text('T·∫°o t√¨nh hu·ªëng'),
              ),
            ),
            const SizedBox(height: 24),
            const Divider(),
            const Text(
              'üå∏ G·ª£i √Ω nhanh t√¨nh hu·ªëng',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            Column(
              children: _suggestedScenarios.map((item) {
                return Card(
                  elevation: 2,
                  margin: const EdgeInsets.symmetric(vertical: 6),
                  child: ListTile(
                    title: Text(item['desc']!,
                        style: const TextStyle(fontSize: 16)),
                    trailing: const Icon(Icons.arrow_forward_ios, size: 16),
                    onTap: () => _createFromSuggestion(item),
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }
}
